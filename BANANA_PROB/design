module BCD_Adder (
    input logic [7:0] A,     // 8-bit BCD number
    input logic [7:0] B,     // 8-bit BCD number
    input logic Cin,         // 1-bit carry-in
    output logic [7:0] S,    // 8-bit BCD sum
    output logic Cout        // 1-bit carry-out
);

    logic [3:0] sum_low, sum_high;
    logic carry_low, carry_high;

    // Lower 4 bits (least significant digit)
    always_comb begin
        {carry_low, sum_low} = A[3:0] + B[3:0] + Cin;
        if (sum_low > 4'd9 || carry_low) begin
            sum_low = sum_low + 4'd6;
            carry_low = 1;
        end else begin
            carry_low = 0;
        end
    end

    // Upper 4 bits (most significant digit)
    always_comb begin
        {carry_high, sum_high} = A[7:4] + B[7:4] + carry_low;
        if (sum_high > 4'd9 || carry_high) begin
            sum_high = sum_high + 4'd6;
            carry_high = 1;
        end else begin
            carry_high = 0;
        end
    end

    // Outputs
    assign S = {sum_high, sum_low};
    assign Cout = carry_high;

endmodule
